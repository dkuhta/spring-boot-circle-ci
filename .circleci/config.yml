# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy-dev:
          requires:
            - build

version: 2.1
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      #      - image: google/cloud-sdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      #       Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: mvn dependency:go-offline

      - run: mvn clean install

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}


      - run: cd target && ls -la

      - store_artifacts:
          path: target/circle-ci-0.0.1-SNAPSHOT.jar

      - persist_to_workspace:
          root: ./
          paths:
            - ./.

  deploy-dev:
    docker:
      - image: google/cloud-sdk

    working_directory: ~/repo

    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ./

      - run:
          name: Setup gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/account-auth.json
            gcloud auth activate-service-account --key-file ${HOME}/account-auth.json
            gcloud config set project helical-study-261016
      #            gcloud --quiet config set container/cluster cluster-lighthouse
      #            gcloud config set compute/zone us-central1-f
      #            gcloud --quiet container clusters get-credentials cluster-lighthouse

      - run:
          name: Build Docker
          command: ls -la && docker build -f Dockerfile -t gcr.io/helical-study-261016/test:$CIRCLE_SHA1 .

      - run:
          name: Tag Docker
          command: docker tag gcr.io/helical-study-261016/test:$CIRCLE_SHA1 gcr.io/helical-study-261016/test:latest

      - run:
          name: Docker auth
          command: echo y | gcloud auth configure-docker

      - run:
          name: Push container
          command: docker push gcr.io/helical-study-261016/test

      #      - run:
      #          name: Publish Open API
      #          command: gcloud endpoints services deploy atlas-rest/openapi.json
      #
      #      - run:
      #          name: Use new Open API verison for deployment
      #          command: sed -i -- "s/SERVICE_VERSION/$(gcloud endpoints configs list --service atlas-api.endpoints.aispot-dev.cloud.goog --limit=1 --format="value(CONFIG_ID.scope())")/" atlas-rest/deployment.yaml
      #
      #      - run:
      #          name: Push container
      #          command: gcloud docker -- push gcr.io/aispot-dev/atlas
      #
      #      - run:
      #          name: Prepare build config
      #          command: |
      #            sed -i -- "s/atlas:latest/atlas:$CIRCLE_SHA1/" atlas-rest/deployment.yaml
      #            sed -i -- "s/NUMBER_OF_REPLICAS/1/" atlas-rest/deployment.yaml
      #
      #      - run:
      #          name: Deploy to k8t
      #          command: kubectl apply -f atlas-rest/deployment.yaml


      #  - run:
      #      name: Setup_gcloud
      #      command: |
      #         Add the Cloud SDK distribution URI as a package source
      #        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      #         Import the Google Cloud Platform public key
      #        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      #         Update the package list and install the Cloud SDK
      #        sudo apt-get update && sudo apt-get install google-cloud-sdk
      #        echo $GCLOUD_SERVICE_KEY > ${HOME}/account-auth.json
      #        mkdir -p ~/.config/gcloud
      #        touch ~/.config/gcloud/application_default_credentials.json
      #        echo $GOOGLE_APPLICATION_CREDENTIALS > ~/.config/gcloud/application_default_credentials.json
      #        cat ~/.config/gcloud/application_default_credentials.json
      #        gcloud config set project helical-study-261016
      #            cat ${HOME}/account-auth.json
      #            gcloud auth activate-service-account --key-file ${HOME}/account-auth.json
      #            gcloud config set compute/zone europe-west1-b
      #            gcloud config set project aispot-dev
      #            gcloud --quiet config set container/cluster cluster-lighthouse
      #            gcloud config set compute/zone us-central1-f
      #            gcloud --quiet container clusters get-credentials cluster-lighthouse



      #  - run:
      #      name: Setup_gcloud
      #      command: |
      #        echo $GCLOUD_CLIENT_KEY > ${HOME}/account-auth.json
      #        gcloud -y auth application-default login \
      #              --client-id-file=${HOME}/account-auth.json
      #        gcloud config set project helical-study-261016
      #        apt install -y maven
      #        mvn clean install
      #        gcloud info
      #            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      #            gcloud config set compute/zone europe-west1-b

      #            echo $GCLOUD_SERVICE_KEY > ${HOME}/application_default_credentials.json
      #            echo $GCLOUD_SERVICE_KEY > ${HOME}/account-auth.json
      #            gcloud auth activate-service-account --key-file ${HOME}/account-auth.json
      #            cat ${HOME}/account-auth.json
      #            gcloud config set project aispot-dev
      #            gcloud --quiet config set container/cluster cluster-lighthouse
      #            gcloud config set compute/zone us-central1-f
      #            gcloud --quiet container clusters get-credentials cluster-lighthouse
